/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frame;

import entity.Arquivo;
import entity.ArquivoTreeModel;
import java.awt.Color;
import java.awt.Cursor;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author Push
 */
public class App extends javax.swing.JFrame {
    
    int xMouse, yMouse;
    
    public static String filename = "";
    public static String header = "";
    public static byte [] conteudoArquivos;
    public static String arquivoComHash = "";
    public static String dataCriacao = "";
    public static List<Arquivo> arquivos;
    public static List<Arquivo> garbage;

    /**
     * Creates new form App
     */
    public App(String filename, String header, String arquivoComHash, String dataCriacao, byte [] conteudoArquivos) {
        this.filename = filename;
        this.header = header.replace("$$$", "");
        this.arquivoComHash = arquivoComHash;
        this.dataCriacao = dataCriacao;
        this.conteudoArquivos = conteudoArquivos;
        initComponents();
        montarArvore();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        top = new javax.swing.JPanel();
        btClose = new javax.swing.JLabel();
        btVoltar = new javax.swing.JLabel();
        btMinimizar = new javax.swing.JLabel();
        frameDrag = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btDesfrag = new javax.swing.JLabel();
        btInserirArquivo = new javax.swing.JLabel();
        btCriarDiretorio = new javax.swing.JLabel();
        btExtrairArquivo = new javax.swing.JLabel();
        btExibirConteudo = new javax.swing.JLabel();
        frameDrag1 = new javax.swing.JPanel();
        conteudoArquivo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        metadados = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("winDUB");
        setMaximumSize(new java.awt.Dimension(860, 515));
        setMinimumSize(new java.awt.Dimension(860, 515));
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(null);

        top.setBackground(new java.awt.Color(60, 120, 120));
        top.setForeground(new java.awt.Color(255, 255, 255));
        top.setMaximumSize(new java.awt.Dimension(860, 30));
        top.setMinimumSize(new java.awt.Dimension(860, 30));
        top.setName(""); // NOI18N
        top.setPreferredSize(new java.awt.Dimension(860, 30));
        top.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                topMouseDragged(evt);
            }
        });
        top.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                topMousePressed(evt);
            }
        });
        top.setLayout(null);

        btClose.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        btClose.setForeground(new java.awt.Color(204, 204, 204));
        btClose.setText("x");
        btClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btCloseMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btCloseMouseExited(evt);
            }
        });
        top.add(btClose);
        btClose.setBounds(735, 2, 14, 20);

        btVoltar.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        btVoltar.setForeground(new java.awt.Color(204, 204, 204));
        btVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/voltar.png"))); // NOI18N
        btVoltar.setToolTipText("Voltar");
        btVoltar.setAlignmentY(0.0F);
        btVoltar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btVoltar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btVoltarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btVoltarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btVoltarMouseExited(evt);
            }
        });
        top.add(btVoltar);
        btVoltar.setBounds(0, 0, 30, 30);

        btMinimizar.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        btMinimizar.setForeground(new java.awt.Color(204, 204, 204));
        btMinimizar.setText("_");
        btMinimizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btMinimizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btMinimizarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btMinimizarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btMinimizarMouseExited(evt);
            }
        });
        top.add(btMinimizar);
        btMinimizar.setBounds(713, 2, 14, 20);

        frameDrag.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                frameDragMouseDragged(evt);
            }
        });
        frameDrag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                frameDragMousePressed(evt);
            }
        });
        top.add(frameDrag);
        frameDrag.setBounds(0, 0, 757, 30);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("WIN");
        top.add(jLabel1);
        jLabel1.setBounds(344, 8, 30, 20);

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 22)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("DUB");
        top.add(jLabel2);
        jLabel2.setBounds(370, 0, 48, 30);

        getContentPane().add(top);
        top.setBounds(103, 0, 757, 30);

        jPanel1.setBackground(new java.awt.Color(30, 60, 60));
        jPanel1.setMaximumSize(new java.awt.Dimension(91, 455));
        jPanel1.setMinimumSize(new java.awt.Dimension(91, 455));
        jPanel1.setPreferredSize(new java.awt.Dimension(91, 455));
        jPanel1.setLayout(null);

        btDesfrag.setBackground(new java.awt.Color(30, 60, 60));
        btDesfrag.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btDesfrag.setForeground(new java.awt.Color(255, 255, 255));
        btDesfrag.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btDesfrag.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/desfrag.png"))); // NOI18N
        btDesfrag.setText("Desfragmentar");
        btDesfrag.setToolTipText("Desfragmenta o espa√ßo do arquivo");
        btDesfrag.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btDesfrag.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btDesfrag.setMaximumSize(new java.awt.Dimension(103, 103));
        btDesfrag.setMinimumSize(new java.awt.Dimension(103, 103));
        btDesfrag.setOpaque(true);
        btDesfrag.setPreferredSize(new java.awt.Dimension(103, 103));
        btDesfrag.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btDesfrag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btDesfragMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btDesfragMouseExited(evt);
            }
        });
        jPanel1.add(btDesfrag);
        btDesfrag.setBounds(0, 412, 103, 103);

        btInserirArquivo.setBackground(new java.awt.Color(30, 60, 60));
        btInserirArquivo.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btInserirArquivo.setForeground(new java.awt.Color(255, 255, 255));
        btInserirArquivo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btInserirArquivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/inserirArquivo.png"))); // NOI18N
        btInserirArquivo.setText("Inserir Arquivo");
        btInserirArquivo.setToolTipText("Insere novo arquivo ao arquivo .dub");
        btInserirArquivo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btInserirArquivo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btInserirArquivo.setMaximumSize(new java.awt.Dimension(103, 103));
        btInserirArquivo.setMinimumSize(new java.awt.Dimension(103, 103));
        btInserirArquivo.setOpaque(true);
        btInserirArquivo.setPreferredSize(new java.awt.Dimension(103, 103));
        btInserirArquivo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btInserirArquivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btInserirArquivoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btInserirArquivoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btInserirArquivoMouseExited(evt);
            }
        });
        jPanel1.add(btInserirArquivo);
        btInserirArquivo.setBounds(0, 103, 103, 103);

        btCriarDiretorio.setBackground(new java.awt.Color(30, 60, 60));
        btCriarDiretorio.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btCriarDiretorio.setForeground(new java.awt.Color(255, 255, 255));
        btCriarDiretorio.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btCriarDiretorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/criarDiretorio.png"))); // NOI18N
        btCriarDiretorio.setText("Criar Diret√≥rio");
        btCriarDiretorio.setToolTipText("Cria novo diret√≥rio dentro do arquivo .dub");
        btCriarDiretorio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btCriarDiretorio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btCriarDiretorio.setMaximumSize(new java.awt.Dimension(103, 103));
        btCriarDiretorio.setMinimumSize(new java.awt.Dimension(103, 103));
        btCriarDiretorio.setOpaque(true);
        btCriarDiretorio.setPreferredSize(new java.awt.Dimension(103, 103));
        btCriarDiretorio.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btCriarDiretorio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btCriarDiretorioMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btCriarDiretorioMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btCriarDiretorioMouseExited(evt);
            }
        });
        jPanel1.add(btCriarDiretorio);
        btCriarDiretorio.setBounds(0, 0, 103, 103);

        btExtrairArquivo.setBackground(new java.awt.Color(30, 60, 60));
        btExtrairArquivo.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btExtrairArquivo.setForeground(new java.awt.Color(255, 255, 255));
        btExtrairArquivo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btExtrairArquivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/extrairArquivo.png"))); // NOI18N
        btExtrairArquivo.setText("Extrair Arquivo");
        btExtrairArquivo.setToolTipText("Extrai arquivos para o Sistema");
        btExtrairArquivo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btExtrairArquivo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btExtrairArquivo.setMaximumSize(new java.awt.Dimension(103, 103));
        btExtrairArquivo.setMinimumSize(new java.awt.Dimension(103, 103));
        btExtrairArquivo.setOpaque(true);
        btExtrairArquivo.setPreferredSize(new java.awt.Dimension(103, 103));
        btExtrairArquivo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btExtrairArquivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btExtrairArquivoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btExtrairArquivoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btExtrairArquivoMouseExited(evt);
            }
        });
        jPanel1.add(btExtrairArquivo);
        btExtrairArquivo.setBounds(0, 206, 103, 103);

        btExibirConteudo.setBackground(new java.awt.Color(30, 60, 60));
        btExibirConteudo.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btExibirConteudo.setForeground(new java.awt.Color(255, 255, 255));
        btExibirConteudo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btExibirConteudo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/exibirConteudo.png"))); // NOI18N
        btExibirConteudo.setText("Exibir Conte√∫do");
        btExibirConteudo.setToolTipText("Abre qrquivos com extens√£o .txt");
        btExibirConteudo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btExibirConteudo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btExibirConteudo.setMaximumSize(new java.awt.Dimension(103, 103));
        btExibirConteudo.setMinimumSize(new java.awt.Dimension(103, 103));
        btExibirConteudo.setOpaque(true);
        btExibirConteudo.setPreferredSize(new java.awt.Dimension(103, 103));
        btExibirConteudo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btExibirConteudo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btExibirConteudoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btExibirConteudoMouseExited(evt);
            }
        });
        jPanel1.add(btExibirConteudo);
        btExibirConteudo.setBounds(0, 309, 103, 103);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 103, 515);

        frameDrag1.setBackground(new java.awt.Color(60, 120, 120));
        frameDrag1.setForeground(new java.awt.Color(255, 255, 255));
        frameDrag1.setMaximumSize(new java.awt.Dimension(860, 30));
        frameDrag1.setMinimumSize(new java.awt.Dimension(860, 30));
        frameDrag1.setName(""); // NOI18N
        frameDrag1.setPreferredSize(new java.awt.Dimension(860, 30));
        frameDrag1.setLayout(null);

        conteudoArquivo.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        conteudoArquivo.setForeground(new java.awt.Color(255, 255, 255));
        conteudoArquivo.setText("Conte√∫do do Arquivo [Tamanho]");
        frameDrag1.add(conteudoArquivo);
        conteudoArquivo.setBounds(8, 2, 740, 26);

        getContentPane().add(frameDrag1);
        frameDrag1.setBounds(103, 485, 757, 30);

        jPanel2.setBackground(new java.awt.Color(90, 170, 170));
        jPanel2.setLayout(null);

        tree.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tree.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tree.setRowHeight(20);
        tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tree);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 11, 465, 433);

        metadados.setColumns(19);
        metadados.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        metadados.setRows(16);
        metadados.setText("Nenhum arquivo selecionado.");
        metadados.setEnabled(false);
        jScrollPane2.setViewportView(metadados);

        jPanel2.add(jScrollPane2);
        jScrollPane2.setBounds(485, 34, 262, 410);

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("INFORMA√á√ïES");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(484, 8, 260, 20);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(103, 30, 757, 455);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCloseMouseClicked
        // TODO add your handling code here:
        
        int dialogResult = JOptionPane.showConfirmDialog(null, "Deseja realmente sair?", "Sair", JOptionPane.YES_NO_OPTION);
        
        if(dialogResult == JOptionPane.YES_OPTION)System.exit(0);
        
    }//GEN-LAST:event_btCloseMouseClicked

    private void btCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCloseMouseEntered
        // TODO add your handling code here:
        btClose.setForeground(new Color(234, 234, 234));
    }//GEN-LAST:event_btCloseMouseEntered

    private void btCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCloseMouseExited
        // TODO add your handling code here:
        btClose.setForeground(new Color(204, 204, 204));
    }//GEN-LAST:event_btCloseMouseExited

    private void topMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_topMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_topMouseDragged

    private void topMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_topMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_topMousePressed

    private void btMinimizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btMinimizarMouseClicked
        // TODO add your handling code here:
        this.setState(ICONIFIED);
    }//GEN-LAST:event_btMinimizarMouseClicked

    private void btMinimizarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btMinimizarMouseEntered
        // TODO add your handling code here:
        btMinimizar.setForeground(new Color(234, 234, 234));
    }//GEN-LAST:event_btMinimizarMouseEntered

    private void btMinimizarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btMinimizarMouseExited
        // TODO add your handling code here:
        btMinimizar.setForeground(new Color(204, 204, 204));
    }//GEN-LAST:event_btMinimizarMouseExited

    private void frameDragMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_frameDragMousePressed
        // TODO add your handling code here:
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_frameDragMousePressed

    private void frameDragMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_frameDragMouseDragged
        // TODO add your handling code here:
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse - 103, y - yMouse);
    }//GEN-LAST:event_frameDragMouseDragged

    private void btCriarDiretorioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCriarDiretorioMouseEntered
        // TODO add your handling code here:
        btCriarDiretorio.setBackground(new Color(45, 90, 90));
    }//GEN-LAST:event_btCriarDiretorioMouseEntered

    private void btCriarDiretorioMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCriarDiretorioMouseExited
        // TODO add your handling code here:
        btCriarDiretorio.setBackground(new Color(30, 60, 60));
    }//GEN-LAST:event_btCriarDiretorioMouseExited

    private void btInserirArquivoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btInserirArquivoMouseEntered
        // TODO add your handling code here:
        btInserirArquivo.setBackground(new Color(45, 90, 90));
    }//GEN-LAST:event_btInserirArquivoMouseEntered

    private void btInserirArquivoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btInserirArquivoMouseExited
        // TODO add your handling code here:
        btInserirArquivo.setBackground(new Color(30, 60, 60));
    }//GEN-LAST:event_btInserirArquivoMouseExited

    private void btDesfragMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btDesfragMouseEntered
        // TODO add your handling code here:
        btDesfrag.setBackground(new Color(45, 90, 90));
    }//GEN-LAST:event_btDesfragMouseEntered

    private void btDesfragMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btDesfragMouseExited
        // TODO add your handling code here:
        btDesfrag.setBackground(new Color(30, 60, 60));
    }//GEN-LAST:event_btDesfragMouseExited

    private void btExtrairArquivoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btExtrairArquivoMouseEntered
        // TODO add your handling code here:
        btExtrairArquivo.setBackground(new Color(45, 90, 90));
    }//GEN-LAST:event_btExtrairArquivoMouseEntered

    private void btExtrairArquivoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btExtrairArquivoMouseExited
        // TODO add your handling code here:
        btExtrairArquivo.setBackground(new Color(30, 60, 60));
    }//GEN-LAST:event_btExtrairArquivoMouseExited

    private void btExibirConteudoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btExibirConteudoMouseEntered
        // TODO add your handling code here:
        btExibirConteudo.setBackground(new Color(45, 90, 90));
    }//GEN-LAST:event_btExibirConteudoMouseEntered

    private void btExibirConteudoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btExibirConteudoMouseExited
        // TODO add your handling code here:
        btExibirConteudo.setBackground(new Color(30, 60, 60));
    }//GEN-LAST:event_btExibirConteudoMouseExited

    private void btInserirArquivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btInserirArquivoMouseClicked
           
        if(tree.getSelectionPath() == null || tree.getSelectionPath().getLastPathComponent() == null) {
            JOptionPane.showMessageDialog(null, "Erro: Selecione o local para inser√ß√£o de arquivo na √°rvore de Arquivos/Diret√≥rios.");
            return;
        }
        
        JFileChooser fileChooser = new JFileChooser();
        
        fileChooser.setDialogTitle("Selecione o Arquivo");

        if(fileChooser.showSaveDialog(new JFrame()) == JFileChooser.APPROVE_OPTION) {
                
            inserirArquivo(fileChooser.getSelectedFile());
            
            montarArvore();
            
        }
        
    }//GEN-LAST:event_btInserirArquivoMouseClicked

    private void btCriarDiretorioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCriarDiretorioMouseClicked
             
        if(tree.getSelectionPath() == null || tree.getSelectionPath().getLastPathComponent() == null) {
            JOptionPane.showMessageDialog(null, "Erro: Selecione o local para cria√ß√£o de diret√≥rio na √°rvore de Arquivos/Diret√≥rios.");
            return;
        }
        
        String nomePasta = "";
        
        nomePasta = JOptionPane.showInputDialog("Digite o nome da nova pasta:");
        
        if (nomePasta == null) return;
        
        if (nomePasta.contains(".")) {
            JOptionPane.showMessageDialog(null, "Erro: O nome do diret√≥rio n√£o pode conter o caractere \".\" (ponto).");
            return;
        }
        
        if (nomePasta.contains("root")) {
            JOptionPane.showMessageDialog(null, "Erro: O nome do diret√≥rio n√£o pode ser \"root\".");
            return;
        }
        
        if(nomePasta.contains("!") || nomePasta.contains("@") || nomePasta.contains("#") || nomePasta.contains("$") ||
           nomePasta.contains("$") || nomePasta.contains("%") || nomePasta.contains("¬®") || nomePasta.contains("&") ||
           nomePasta.contains("*") || nomePasta.contains("(") || nomePasta.contains(")") || nomePasta.contains("-") ||
           nomePasta.contains("_") || nomePasta.contains("+") || nomePasta.contains("=") || nomePasta.contains("¬ß") ||
           nomePasta.contains("{") || nomePasta.contains("}") || nomePasta.contains("[") || nomePasta.contains("¬™") ||
           nomePasta.contains("]") || nomePasta.contains("¬∫") || nomePasta.contains(":") || nomePasta.contains(";") ||
           nomePasta.contains("?") || nomePasta.contains("/") || nomePasta.contains("~") || nomePasta.contains("^") ||
           nomePasta.contains("`") || nomePasta.contains("¬¥") || nomePasta.contains("\\")|| nomePasta.contains("\"")||
           nomePasta.contains("\'")|| nomePasta.contains("¬π") || nomePasta.contains("¬≤") || nomePasta.contains("¬≥") ||
           nomePasta.contains("¬£") || nomePasta.contains("¬¢") || nomePasta.contains("|") || nomePasta.contains("¬¨") ||
           nomePasta.contains(",")){

            JOptionPane.showMessageDialog(null, "Erro: O nome do diret√≥rio n√£o pode conter caracteres especiais.");
            return;
        }
        
        if (verificaNomePasta(nomePasta)) {
            JOptionPane.showMessageDialog(null, "Erro: J√° existe um diret√≥rio com este nome neste local.");
            return;
        }
        
        criarDiretorio(nomePasta);
        
        montarArvore();
        
    }//GEN-LAST:event_btCriarDiretorioMouseClicked

    private void treeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeMouseClicked
        
        Arquivo root = new Arquivo();
        root.setId("-");

        if(tree.getSelectionPath() != null && tree.getSelectionPath().getLastPathComponent() != null) {
            root = ((Arquivo)tree.getSelectionPath().getLastPathComponent());
        }
        
        String tamanhoArquivoText = "";
        
        if(root.getTamanho() != 0) {
            float tamanhoAux = root.getTamanho() / 1024;
            tamanhoArquivoText = root.getTamanho() + " bytes ";
            DecimalFormat df = new DecimalFormat();
            df.setMaximumFractionDigits(2);

            if(tamanhoAux >= 1) {
                tamanhoArquivoText = df.format(tamanhoAux) + " KB ";
                tamanhoAux /= 1024;
            }

            if(tamanhoAux >= 1) {
                tamanhoArquivoText = df.format(tamanhoAux) + " MB ";
                tamanhoAux /= 1024;
            }

            if(tamanhoAux >= 1) {
                tamanhoArquivoText = df.format(tamanhoAux) + " GB ";
                tamanhoAux /= 1024;
            }

            if(tamanhoAux >= 1) {
                tamanhoArquivoText = df.format(tamanhoAux) + " TB ";
                tamanhoAux /= 1024;
            }
            
        }
        
        String metadado = header.split("###")[0];
        String nomeArquivo = metadado.split("&&&")[0] + ".dub";
        
        if(root.getId().equals("-")) metadados.setText("");
        else if(root.getId().equals("0")) metadados.setText("Diret√≥rio Raiz:\n" + nomeArquivo.substring(0, nomeArquivo.lastIndexOf(".")));
        else if(root.getTipo() == 0) metadados.setText("Diret√≥rio:\n" + root.getNome() + "\n\n"
                                                        + "Local Interno:\n" + nomeArquivo.substring(0, nomeArquivo.lastIndexOf(".")) + root.getDubPath(root) + "\n\n"
                                                        + "Data de Cria√ß√£o:\n" + root.getCriacao() + "\n\n"
                                                        + "Cont√©udo:\n"
                                                        + root.getQtdArquivos() + " Arquivo(s)\n"
                                                        + root.getQtdPastas() + " Pasta(s)\n");
        else if(root.getTipo() == 1) metadados.setText("Arquivo:\n" + root.getNome() + "\n\n"
                                                        + "Local Interno:\n" + nomeArquivo.substring(0, nomeArquivo.lastIndexOf(".")) + root.getDubPath(root) + "\n\n"
                                                        + "Origem:\n" + root.getPath() + "\n\n"
                                                        + "Tamanho:\n" + tamanhoArquivoText + "\n\n"
                                                        + "Data de Cria√ß√£o:\n" + root.getCriacao());
        
        
    }//GEN-LAST:event_treeMouseClicked

    private void btVoltarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btVoltarMouseClicked
        
        WinDub wd = new WinDub();
        wd.setVisible(true);

        this.setAlwaysOnTop(true);

        SwingWorker w = new SwingWorker() {
        @Override
        protected Object doInBackground() throws Exception {
            for(int i = 50; i > 0; i--) {
            setOpacity(i * 0.02f);
            try {
                    Thread.sleep(20);
                } catch (InterruptedException ex) {
                    Logger.getLogger(WinDub.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            setVisible(false);

            return 0;

        }

        };

        w.execute();
        
    }//GEN-LAST:event_btVoltarMouseClicked

    private void btVoltarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btVoltarMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btVoltarMouseEntered

    private void btVoltarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btVoltarMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btVoltarMouseExited

    private void btExtrairArquivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btExtrairArquivoMouseClicked
        if(tree.getSelectionPath() == null || tree.getSelectionPath().getLastPathComponent() == null) {
            JOptionPane.showMessageDialog(null, "Erro: Selecione um arquivo na √°rvore de Arquivos/Diret√≥rios para extra√ß√£o.");
            return;
        }
        
        Arquivo arq = (Arquivo) tree.getSelectionPath().getLastPathComponent();
        if(arq.getTipo() != 1) {
            JOptionPane.showMessageDialog(null, "Erro: Diret√≥rios n√£o podem ser extra√≠dos.");
            return;
        }
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Salvar como");
        fileChooser.setSelectedFile(new File(arq.getNome()));
        fileChooser.setFileFilter(new FileNameExtensionFilter("*" + arq.getNome().substring(arq.getNome().lastIndexOf(".")),
                                                                arq.getNome().substring(arq.getNome().lastIndexOf("."))));

        int opt = fileChooser.showSaveDialog(null);
        if (opt == JFileChooser.APPROVE_OPTION) {
            
            extrairArquivo(arq, fileChooser);
        
            extrairArquivoHeader(arq);
            
            montarArvore();
            
        }
        
    }//GEN-LAST:event_btExtrairArquivoMouseClicked

    public JLabel getConteudoArquivo() {
        return conteudoArquivo;
    }

    public void setConteudoArquivo(JLabel conteudoArquivo) {
        this.conteudoArquivo = conteudoArquivo;
    }

    public JTree getTree() {
        return tree;
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btClose;
    private javax.swing.JLabel btCriarDiretorio;
    private javax.swing.JLabel btDesfrag;
    private javax.swing.JLabel btExibirConteudo;
    private javax.swing.JLabel btExtrairArquivo;
    private javax.swing.JLabel btInserirArquivo;
    private javax.swing.JLabel btMinimizar;
    private javax.swing.JLabel btVoltar;
    private javax.swing.JLabel conteudoArquivo;
    private javax.swing.JLabel frameDrag;
    private javax.swing.JPanel frameDrag1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea metadados;
    private javax.swing.JPanel top;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables

    private void criarDiretorio(String nomePasta) {
        
        try {
                
            SimpleDateFormat fmt = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

            String dataCriacao = fmt.format(new Date());

            ArquivoTreeModel arvore = ((ArquivoTreeModel)tree.getModel());

            Arquivo root = ((Arquivo)tree.getSelectionPath().getLastPathComponent());
            
            if(!root.getAllowsChildren()){
                if(root.getParent() == null) {
                    root = (Arquivo)((ArquivoTreeModel)tree.getModel()).getRoot();
                } else {
                    root = (Arquivo)root.getParent();
                }
            }

            String novoId = root.getId() + "." + (arvore.getChildCount(root) + 1);
            
            if(novoId.contains("0")) novoId = novoId.replace("0.", "");

            header += "###" + nomePasta + "&&&0&&&" + dataCriacao + "&&&" + novoId;
            
            FileOutputStream dub = new FileOutputStream(filename);

            String conteudoComHeader = header + "$$$" + new String(conteudoArquivos);
            
            dub.write(conteudoComHeader.getBytes());

            dub.close();

            // Reescrever com Hash
            // # = Separador, $ = Final do cabe√ßalho                
            arquivoComHash = gerarHashArquivo(filename) + "###"
                    + conteudoComHeader;

            dub = new FileOutputStream(filename, false);

            dub.write(arquivoComHash.getBytes());

            dub.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(WinDub.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(WinDub.class.getName()).log(Level.SEVERE, null, ex);
        }        
        
    }
    
    private String gerarHashArquivo(String path) {
            
        StringBuffer sb = new StringBuffer("");
        
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            
            byte [] array = Files.readAllBytes(new File(path).toPath());
            
            md.update(array, 0, array.length);
            byte[] hashMd5 = md.digest();
            for (int i = 0; i < hashMd5.length; i++) {
                sb.append(Integer.toString((hashMd5[i] & 0xff) + 0x100, 16).substring(1));
            }
            
        } catch (IOException ex) {
            Logger.getLogger(WinDub.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(WinDub.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return sb.toString();
        
    }

    private void montarArvore() {
        
        // Ler header
        List<String> list = Arrays.asList(header.split("###"));
        
        list = new ArrayList<String>(list);
        
        arquivos = new ArrayList<Arquivo>();
        
        list.remove(0); // Remover metadados do .dub
        
        for(String s : list) {
            String [] arquivoPart = s.split("&&&");
            
            if(Integer.parseInt(arquivoPart[1]) == 0) {
            
                // Diretorio
                Arquivo a = new Arquivo();
                a.setNome(arquivoPart[0]);
                a.setTipo(Integer.parseInt(arquivoPart[1]));
                a.setCriacao(arquivoPart[2]);
                a.setId(arquivoPart[3]);
                a.setIdInterno(a.getId());
                
                arquivos.add(a);
                
            } else {
            
                // Arquivo
                Arquivo a = new Arquivo();
                a.setNome(arquivoPart[0]);
                a.setTipo(Integer.parseInt(arquivoPart[1]));
                a.setPath(arquivoPart[2]);
                a.setInicio(Integer.parseInt(arquivoPart[3]));
                a.setTamanho(Integer.parseInt(arquivoPart[4]));
                a.setCriacao(arquivoPart[5]);
                a.setId(arquivoPart[6]);
                a.setIdInterno(a.getId());
                
                arquivos.add(a);
                
            }
            
        }
            
        CompArquivos ca = new CompArquivos();

        Collections.sort(arquivos, ca);
        
        System.out.println("Lista Ordenada");
        
        listaEncadeada(arquivos);
        
        System.out.println("Lista Encadeada");
        
        ArquivoTreeModel arvore = new ArquivoTreeModel(arquivos);
        
        String metadado = header.split("###")[0];
        String nomeArquivo = metadado.split("&&&")[0] + ".dub";
        
        ((Arquivo)arvore.getRoot()).setNome(nomeArquivo);
        
        tree.setModel(arvore);
        
        atualizarConteudoFrame();
        
    }

    private void listaEncadeada(List<Arquivo> arquivos) {
        Arquivo pai = new Arquivo();
        for(int i = 0; i < arquivos.size(); i++) {
            if(!arquivos.get(i).getArquivos().isEmpty()) listaEncadeada(arquivos.get(i).getArquivos());
            if(arquivos.get(i).getIdInterno().contains(".")) {
                Arquivo filho = arquivos.remove(i);
                filho.setIdInterno(filho.getIdInterno().substring(filho.getId().indexOf(".")+1));
                filho.setPai(pai);
                pai.getArquivos().add(filho);
                i = -1;
            } else {
                pai = arquivos.get(i);
            }
        }
    }

    private boolean verificaNomePasta(String nomePasta) {
        
        List<Arquivo> arquivos = null;
        Arquivo root = ((Arquivo)tree.getSelectionPath().getLastPathComponent());

        if(!root.getAllowsChildren()){
            if(root.getParent() == null) {
                root = (Arquivo)((ArquivoTreeModel)tree.getModel()).getRoot();
            } else {
                root = (Arquivo)root.getParent();
            }
        }
        
        arquivos = root.getArquivos();
        
        for(Arquivo a : arquivos) {
            if(a.getNome().equalsIgnoreCase(nomePasta)) return true;
        }
        
        return false;
        
    }

    private void inserirArquivo(File arquivo) {
        
        try {
            
            byte [] conteudo = Files.readAllBytes(arquivo.toPath());
                
            SimpleDateFormat fmt = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

            String dataCriacao = fmt.format(new Date());

            ArquivoTreeModel arvore = ((ArquivoTreeModel)tree.getModel());

            Arquivo root = ((Arquivo)tree.getSelectionPath().getLastPathComponent());
            
            if(!root.getAllowsChildren()){
                if(root.getParent() == null) {
                    root = (Arquivo)((ArquivoTreeModel)tree.getModel()).getRoot();
                } else {
                    root = (Arquivo)root.getParent();
                }
            }

            String novoId = root.getId() + "." + (arvore.getChildCount(root) + 1);

            if(novoId.contains("0")) novoId = novoId.replace("0.", "");
            
            // PROCURAR INICIO > GARBAGE OU FINAL DO ARQUIVO
            
            int inicio = conteudoArquivos.length;

            header += "###" + arquivo.getName() + "&&&1&&&" + arquivo.getPath() 
                    + "&&&" + inicio
                    + "&&&" + conteudo.length + "&&&" + dataCriacao + "&&&" + novoId;
            
            //conteudoArquivos += conteudoStr;
            
            byte [] novoConteudoArquivos = Arrays.copyOf(conteudoArquivos, conteudoArquivos.length + conteudo.length);
            System.arraycopy(conteudo, 0, novoConteudoArquivos, conteudoArquivos.length, conteudo.length);
            
            conteudoArquivos = novoConteudoArquivos;
            
            FileOutputStream dub = new FileOutputStream(filename);

            String conteudoComHeader = header + "$$$" + new String(conteudoArquivos);
            
            dub.write(conteudoComHeader.getBytes());

            dub.close();

            // Reescrever com Hash
            // # = Separador, $ = Final do cabe√ßalho                
            arquivoComHash = gerarHashArquivo(filename) + "###"
                    + conteudoComHeader;

            dub = new FileOutputStream(filename, false);

            dub.write(arquivoComHash.getBytes());

            dub.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(WinDub.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(WinDub.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void atualizarConteudoFrame() {
        
        float tamanhoAux = arquivoComHash.getBytes().length / 1024;
        String tamanhoArquivoText = arquivoComHash.getBytes().length + " bytes ";
        DecimalFormat df = new DecimalFormat();
        df.setMaximumFractionDigits(2);
        
        if(tamanhoAux >= 1) {
            tamanhoArquivoText = df.format(tamanhoAux) + " KB ";
            tamanhoAux /= 1024;
        }
        
        if(tamanhoAux >= 1) {
            tamanhoArquivoText = df.format(tamanhoAux) + " MB ";
            tamanhoAux /= 1024;
        }
        
        if(tamanhoAux >= 1) {
            tamanhoArquivoText = df.format(tamanhoAux) + " GB ";
            tamanhoAux /= 1024;
        }
        
        if(tamanhoAux >= 1) {
            tamanhoArquivoText = df.format(tamanhoAux) + " TB ";
            tamanhoAux /= 1024;
        }
        
        conteudoArquivo.setText(tamanhoArquivoText + "(Criado em: " + dataCriacao + ")");
        
    }

    private void extrairArquivo(Arquivo arq, JFileChooser fileChooser) {
        
        // Salvar conteudo
        
        try {
                
            FileOutputStream fos = new FileOutputStream(fileChooser.getSelectedFile());
            DataOutputStream dos = new DataOutputStream(fos);

            for(int i = arq.getInicio(); i < arq.getInicio()+arq.getTamanho(); i++) {
                dos.writeByte(conteudoArquivos[i]);
            }
            
            dos.close();
            fos.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(WinDub.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(WinDub.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void extrairArquivoHeader(Arquivo arq) {
        
        // Remover do header
        
        String [] headerSplit = header.split("###");
        int linhaRemovida = 0;
        
        for(int i = 1; i < headerSplit.length; i++) {
            String tipo = headerSplit[i].split("&&&")[1];
            if(tipo.equals("1")) {
                String id = headerSplit[i].split("&&&")[6];
                if(id.equals(arq.getId())) {
                    linhaRemovida = i;
                    break;
                } 
            }
        }
        
        String novoHeader = "";
        
        for(int i = 0; i < headerSplit.length; i++) {
            if(i != linhaRemovida){
                novoHeader += headerSplit[i] + "###";
            }
        }
        
        novoHeader += "?";
        novoHeader = novoHeader.replace("###?", "");        
        
        header = novoHeader;
        
        try {
            
            FileOutputStream dub = new FileOutputStream(filename);

            String conteudoComHeader = header + "$$$" + new String(conteudoArquivos);
            
            dub.write(conteudoComHeader.getBytes());

            dub.close();

            // Reescrever com Hash
            // # = Separador, $ = Final do cabe√ßalho                
            arquivoComHash = gerarHashArquivo(filename) + "###"
                    + conteudoComHeader;

            dub = new FileOutputStream(filename, false);

            dub.write(arquivoComHash.getBytes());

            dub.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(WinDub.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(WinDub.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public class CompArquivos implements Comparator<Arquivo> {
        public int compare(Arquivo a1, Arquivo a2) {
            return a1.getId().compareTo(a2.getId());
    }
}
    
}
